{"version":3,"file":"2-form.js","sources":["../src/js/2-form.js"],"sourcesContent":["const form = document.querySelector('.feedback-form');\nconst STORAGE_KEY = 'feedback-form-state';\nlet formData = {\n    email: '',\n    message: '',\n};\nconst savedData = localStorage.getItem(STORAGE_KEY);\nif (savedData) {\n    try {\n        formData = JSON.parse(savedData);\n        form.email.value = formData.email || '';\n        form.message.value = formData.message || '';\n    } catch (err) { \n        console.log('Помилка при зчитуванні з localStorage:', err);\n    }\n} \nform.addEventListener('input', event => {\n    const {name, value} = event.target;\n    formData[name] = value.trim();\n    localStorage.setItem(STORAGE_KEY, JSON.stringify(formData));\n});\n\nform.addEventListener('submit', event => {\n    event.preventDefault();\n    const {email, message} = formData;\n    if (!email || !message) {\n        alert('Fill please all fields');\n        return;\n    }\n    console.log('Submitted:', formData);\n    localStorage.removeItem(STORAGE_KEY);\n    formData = {email: '', message: ''};\n    form.reset();\n});\n\n// Оголоси поза будь-якими функціями обєкт formData з полями email та message, які спочатку мають порожні рядки як значення: { email: \"\", message: \"\" }.\n// Використовуй метод делегування для відстеження змін у формі через подію input. \n// Зберігай актуальні дані з полів email та message у formData та записуй цей обєкт у локальне сховище. \n// Використовуй ключ \"feedback-form-state\" для зберігання даних у сховищі.\n// При завантаженні сторінки перевір, чи є дані у локальному сховищі. Якщо так, використовуй їх для заповнення форми та об'єкта formData. \n// Якщо ні, залиш поля форми порожніми.\n// Перед відправленням форми переконайся, що обидва поля форми заповнені. \n// Якщо будь-яке з полів (властивостей обєкта formData) порожнє, показуй сповіщення з текстом «Fill please all fields».\n//  Якщо всі поля заповнені, виведи у консоль обєкт formData з актуальними значеннями, очисти локальне сховище, обєкт formData і поля форми.\n\n\n// На живій сторінці відображається форма з двома елементами форми і кнопкою типу submit\n// Форма стилізована згідно з макетом\n// На формі прослуховуються події input і submit\n// При введенні даних у будь-який елемент форми вони записуються у локальне сховище під ключем \"feedback-form-state\", збережені дані не містять пробіли по краях\n// Введення даних в одне поле форми не видаляє дані в сховищі для іншого\n// При оновленні сторінки дані з локального сховища підставляються в елементи форми, у полях форми відсутні undefined\n// При сабміті форми є перевірка, щоб обидва елементи форми були заповнені\n// Під час сабміту форми, якщо обидва елементи форми заповнені, виводиться у консоль об'єкт з полями email, message та їхніми поточними значеннями,\n//  а також очищаються сховище і поля форми\n// Якщо після сабміту форми ввести в будь-який елемент форми дані, то в локальному сховищі не зявляються дані від попереднього сабміта\n\n"],"names":["form","STORAGE_KEY","formData","savedData","err","event","name","value","email","message"],"mappings":"wFAAA,MAAMA,EAAO,SAAS,cAAc,gBAAgB,EAC9CC,EAAc,sBACpB,IAAIC,EAAW,CACX,MAAO,GACP,QAAS,EACb,EACA,MAAMC,EAAY,aAAa,QAAQF,CAAW,EAClD,GAAIE,EACA,GAAI,CACAD,EAAW,KAAK,MAAMC,CAAS,EAC/BH,EAAK,MAAM,MAAQE,EAAS,OAAS,GACrCF,EAAK,QAAQ,MAAQE,EAAS,SAAW,EAC5C,OAAQE,EAAK,CACV,QAAQ,IAAI,yCAA0CA,CAAG,CAC5D,CAELJ,EAAK,iBAAiB,QAASK,GAAS,CACpC,KAAM,CAAC,KAAAC,EAAM,MAAAC,CAAK,EAAIF,EAAM,OAC5BH,EAASI,CAAI,EAAIC,EAAM,KAAI,EAC3B,aAAa,QAAQN,EAAa,KAAK,UAAUC,CAAQ,CAAC,CAC9D,CAAC,EAEDF,EAAK,iBAAiB,SAAUK,GAAS,CACrCA,EAAM,eAAc,EACpB,KAAM,CAAC,MAAAG,EAAO,QAAAC,CAAO,EAAIP,EACzB,GAAI,CAACM,GAAS,CAACC,EAAS,CACpB,MAAM,wBAAwB,EAC9B,MACH,CACD,QAAQ,IAAI,aAAcP,CAAQ,EAClC,aAAa,WAAWD,CAAW,EACnCC,EAAW,CAAC,MAAO,GAAI,QAAS,EAAE,EAClCF,EAAK,MAAK,CACd,CAAC"}